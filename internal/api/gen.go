// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AuthCodeResponse defines model for AuthCodeResponse.
type AuthCodeResponse struct {
	// Code Authentication code to be exchanged for tokens
	Code string `json:"code"`

	// ExpiresIn Code expiration time in seconds
	ExpiresIn *int `json:"expires_in,omitempty"`
}

// AuthTokenRequest defines model for AuthTokenRequest.
type AuthTokenRequest struct {
	ClientId string `json:"client_id"`

	// Code Auth code returned from sign in and sign up methods for sentinel tokens
	Code string `json:"code"`
}

// AuthTokenTokensResponse defines model for AuthTokenTokensResponse.
type AuthTokenTokensResponse struct {
	AccessToken  string `json:"access_token"`
	ExpiresIn    *int   `json:"expires_in,omitempty"`
	IdToken      string `json:"id_token"`
	RefreshToken string `json:"refresh_token"`
}

// EmailLoginRequest defines model for EmailLoginRequest.
type EmailLoginRequest struct {
	// ClientId Client application ID
	ClientId string `json:"client_id"`

	// Email User's email address
	Email openapi_types.Email `json:"email"`

	// Password User's password
	Password string `json:"password"`

	// RedirectUri URI to redirect after authentication
	RedirectUri *string `json:"redirect_uri,omitempty"`
}

// EmailRegistrationRequest defines model for EmailRegistrationRequest.
type EmailRegistrationRequest struct {
	// ClientId Client application ID
	ClientId string `json:"client_id"`

	// Email User's email address
	Email openapi_types.Email `json:"email"`

	// Metadata Additional registration metadata
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Password User's password (must meet security requirements)
	Password string `json:"password"`

	// RedirectUri URI to redirect after authentication
	RedirectUri *string `json:"redirect_uri,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error code
	Error string `json:"error"`

	// ErrorDescription Human-readable error description
	ErrorDescription string `json:"error_description"`
}

// StrippedClientProvider defines model for StrippedClientProvider.
type StrippedClientProvider struct {
	ClientId       *string                 `json:"client_id,omitempty"`
	Data           *map[string]interface{} `json:"data"`
	Id             *string                 `json:"id,omitempty"`
	ProviderOption *struct {
		Description *string `json:"description,omitempty"`
		Id          *string `json:"id,omitempty"`
		LogoUrl     *string `json:"logo_url,omitempty"`
		Name        *string `json:"name,omitempty"`
	} `json:"provider_option,omitempty"`
}

// GetAuthProvidersParams defines parameters for GetAuthProviders.
type GetAuthProvidersParams struct {
	ClientId string `form:"client_id" json:"client_id"`
}

// PostAuthProvidersEmailLoginJSONRequestBody defines body for PostAuthProvidersEmailLogin for application/json ContentType.
type PostAuthProvidersEmailLoginJSONRequestBody = EmailLoginRequest

// PostAuthProvidersEmailRegisterJSONRequestBody defines body for PostAuthProvidersEmailRegister for application/json ContentType.
type PostAuthProvidersEmailRegisterJSONRequestBody = EmailRegistrationRequest

// PostAuthTokenJSONRequestBody defines body for PostAuthToken for application/json ContentType.
type PostAuthTokenJSONRequestBody = AuthTokenRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all available providers that a user can sign in with by client id
	// (GET /auth/providers)
	GetAuthProviders(c *gin.Context, params GetAuthProvidersParams)
	// Logs in a user with email and password
	// (POST /auth/providers/email/login)
	PostAuthProvidersEmailLogin(c *gin.Context)
	// Registers a user if email not taken and password meets security requirements
	// (POST /auth/providers/email/register)
	PostAuthProvidersEmailRegister(c *gin.Context)
	// Swap auth token from sign in methods for access, identity, and refresh tokens
	// (POST /auth/token)
	PostAuthToken(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAuthProviders operation middleware
func (siw *ServerInterfaceWrapper) GetAuthProviders(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthProvidersParams

	// ------------- Required query parameter "client_id" -------------

	if paramValue := c.Query("client_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument client_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "client_id", c.Request.URL.Query(), &params.ClientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter client_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuthProviders(c, params)
}

// PostAuthProvidersEmailLogin operation middleware
func (siw *ServerInterfaceWrapper) PostAuthProvidersEmailLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthProvidersEmailLogin(c)
}

// PostAuthProvidersEmailRegister operation middleware
func (siw *ServerInterfaceWrapper) PostAuthProvidersEmailRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthProvidersEmailRegister(c)
}

// PostAuthToken operation middleware
func (siw *ServerInterfaceWrapper) PostAuthToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthToken(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/auth/providers", wrapper.GetAuthProviders)
	router.POST(options.BaseURL+"/auth/providers/email/login", wrapper.PostAuthProvidersEmailLogin)
	router.POST(options.BaseURL+"/auth/providers/email/register", wrapper.PostAuthProvidersEmailRegister)
	router.POST(options.BaseURL+"/auth/token", wrapper.PostAuthToken)
}
